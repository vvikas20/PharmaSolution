//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PharmaDAL.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PharmaDBEntities : DbContext
    {
        public PharmaDBEntities()
            : base("name=PharmaDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountLedgerMaster> AccountLedgerMaster { get; set; }
        public virtual DbSet<AccountLedgerType> AccountLedgerType { get; set; }
        public virtual DbSet<AccountType> AccountType { get; set; }
        public virtual DbSet<AuditHistory> AuditHistory { get; set; }
        public virtual DbSet<BillOutStandings> BillOutStandings { get; set; }
        public virtual DbSet<BillOutStandingsAudjustment> BillOutStandingsAudjustment { get; set; }
        public virtual DbSet<CompanyMaster> CompanyMaster { get; set; }
        public virtual DbSet<Configuration> Configuration { get; set; }
        public virtual DbSet<CustomerCompanyDiscountRef> CustomerCompanyDiscountRef { get; set; }
        public virtual DbSet<CustomerLedger> CustomerLedger { get; set; }
        public virtual DbSet<CustomerType> CustomerType { get; set; }
        public virtual DbSet<FIFO> FIFO { get; set; }
        public virtual DbSet<FirmProperties> FirmProperties { get; set; }
        public virtual DbSet<HSNCode> HSNCode { get; set; }
        public virtual DbSet<ItemMaster> ItemMaster { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<PaymentMode> PaymentMode { get; set; }
        public virtual DbSet<PersonalLedger> PersonalLedger { get; set; }
        public virtual DbSet<PersonLedgerType> PersonLedgerType { get; set; }
        public virtual DbSet<PersonRouteMaster> PersonRouteMaster { get; set; }
        public virtual DbSet<Privledges> Privledges { get; set; }
        public virtual DbSet<PurchaseSaleBookHeader> PurchaseSaleBookHeader { get; set; }
        public virtual DbSet<PurchaseSaleBookLineItem> PurchaseSaleBookLineItem { get; set; }
        public virtual DbSet<PurchaseSaleEntryForm> PurchaseSaleEntryForm { get; set; }
        public virtual DbSet<PurchaseSaleEntryType> PurchaseSaleEntryType { get; set; }
        public virtual DbSet<RateType> RateType { get; set; }
        public virtual DbSet<ReceiptPayment> ReceiptPayment { get; set; }
        public virtual DbSet<RecordType> RecordType { get; set; }
        public virtual DbSet<RolePrivledges> RolePrivledges { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<SupplierCompanyDiscountRef> SupplierCompanyDiscountRef { get; set; }
        public virtual DbSet<SupplierLedger> SupplierLedger { get; set; }
        public virtual DbSet<TempBillOutStandingsAudjustment> TempBillOutStandingsAudjustment { get; set; }
        public virtual DbSet<TempPurchaseSaleBookHeader> TempPurchaseSaleBookHeader { get; set; }
        public virtual DbSet<TempPurchaseSaleBookLineItem> TempPurchaseSaleBookLineItem { get; set; }
        public virtual DbSet<TempReceiptPayment> TempReceiptPayment { get; set; }
        public virtual DbSet<TRN> TRN { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VoucherType> VoucherType { get; set; }
        public virtual DbSet<TableTypePurchaseSaleBookHeader> TableTypePurchaseSaleBookHeader { get; set; }
        public virtual DbSet<TableTypePurchaseSaleBookLineItem> TableTypePurchaseSaleBookLineItem { get; set; }
        public virtual DbSet<CompanyItemMapping> CompanyItemMapping { get; set; }
    
        [DbFunction("PharmaDBEntities", "UDF_GetAmountWithAllDiscountAmounts")]
        public virtual IQueryable<UDF_GetAmountWithAllDiscountAmounts_Result> UDF_GetAmountWithAllDiscountAmounts(Nullable<long> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UDF_GetAmountWithAllDiscountAmounts_Result>("[PharmaDBEntities].[UDF_GetAmountWithAllDiscountAmounts](@PurchaseSaleBookHeaderID)", purchaseSaleBookHeaderIDParameter);
        }
    
        [DbFunction("PharmaDBEntities", "udf_GetFinalAmountWithTaxForSale")]
        public virtual IQueryable<udf_GetFinalAmountWithTaxForSale_Result> udf_GetFinalAmountWithTaxForSale(Nullable<long> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<udf_GetFinalAmountWithTaxForSale_Result>("[PharmaDBEntities].[udf_GetFinalAmountWithTaxForSale](@PurchaseSaleBookHeaderID)", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual ObjectResult<CheckQuantityIfAvailableForSale_Result> CheckQuantityIfAvailableForSale(Nullable<long> purchaseSaleBookHeaderID, Nullable<long> purchaseSaleBookLineItemID, string itemCode, Nullable<decimal> quantity, Nullable<decimal> freeQuantity)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            var purchaseSaleBookLineItemIDParameter = purchaseSaleBookLineItemID.HasValue ?
                new ObjectParameter("PurchaseSaleBookLineItemID", purchaseSaleBookLineItemID) :
                new ObjectParameter("PurchaseSaleBookLineItemID", typeof(long));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var freeQuantityParameter = freeQuantity.HasValue ?
                new ObjectParameter("FreeQuantity", freeQuantity) :
                new ObjectParameter("FreeQuantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckQuantityIfAvailableForSale_Result>("CheckQuantityIfAvailableForSale", purchaseSaleBookHeaderIDParameter, purchaseSaleBookLineItemIDParameter, itemCodeParameter, quantityParameter, freeQuantityParameter);
        }
    
        public virtual ObjectResult<DeleteInvetoryLineItemInTempTable_Result> DeleteInvetoryLineItemInTempTable(Nullable<long> purchaseSaleBookHeaderID, Nullable<long> purchaseSaleBookLineItemID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            var purchaseSaleBookLineItemIDParameter = purchaseSaleBookLineItemID.HasValue ?
                new ObjectParameter("PurchaseSaleBookLineItemID", purchaseSaleBookLineItemID) :
                new ObjectParameter("PurchaseSaleBookLineItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteInvetoryLineItemInTempTable_Result>("DeleteInvetoryLineItemInTempTable", purchaseSaleBookHeaderIDParameter, purchaseSaleBookLineItemIDParameter);
        }
    
        public virtual int DeleteSaleEntryData(Nullable<long> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSaleEntryData", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual ObjectResult<DeleteSaleLineItem_Result> DeleteSaleLineItem(Nullable<int> purchaseSaleBookHeaderID, Nullable<int> tempPurchaseSaleBookLineItemID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(int));
    
            var tempPurchaseSaleBookLineItemIDParameter = tempPurchaseSaleBookLineItemID.HasValue ?
                new ObjectParameter("TempPurchaseSaleBookLineItemID", tempPurchaseSaleBookLineItemID) :
                new ObjectParameter("TempPurchaseSaleBookLineItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteSaleLineItem_Result>("DeleteSaleLineItem", purchaseSaleBookHeaderIDParameter, tempPurchaseSaleBookLineItemIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerLedgerByCode_Result> GetCustomerLedgerByCode(string customerCode)
        {
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("customerCode", customerCode) :
                new ObjectParameter("customerCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerLedgerByCode_Result>("GetCustomerLedgerByCode", customerCodeParameter);
        }
    
        public virtual ObjectResult<GetFinalAmountWithTaxForPurchase_Result> GetFinalAmountWithTaxForPurchase(Nullable<int> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFinalAmountWithTaxForPurchase_Result>("GetFinalAmountWithTaxForPurchase", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseSaleBookHeaderForModify_Result> GetPurchaseSaleBookHeaderForModify(Nullable<long> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseSaleBookHeaderForModify_Result>("GetPurchaseSaleBookHeaderForModify", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual ObjectResult<GetPurchaseSaleBookLineItemsForModify_Result> GetPurchaseSaleBookLineItemsForModify(Nullable<long> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchaseSaleBookLineItemsForModify_Result>("GetPurchaseSaleBookLineItemsForModify", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual ObjectResult<GetSaleLineItemByCode_Result> GetSaleLineItemByCode(string itemCode, string customerCode)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleLineItemByCode_Result>("GetSaleLineItemByCode", itemCodeParameter, customerCodeParameter);
        }
    
        public virtual ObjectResult<GetSaleLineItemInfo_Result> GetSaleLineItemInfo(string itemCode, Nullable<int> fifoID)
        {
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var fifoIDParameter = fifoID.HasValue ?
                new ObjectParameter("FifoID", fifoID) :
                new ObjectParameter("FifoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleLineItemInfo_Result>("GetSaleLineItemInfo", itemCodeParameter, fifoIDParameter);
        }
    
        public virtual int InsertUpdateInvetoryHeadersInTempTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateInvetoryHeadersInTempTable");
        }
    
        public virtual int InsertUpdateInvetoryLineItemInTempTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateInvetoryLineItemInTempTable");
        }
    
        public virtual int InsertUpdateInvetoryLineItemInTempTableForSale()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateInvetoryLineItemInTempTableForSale");
        }
    
        public virtual ObjectResult<SaleInvoice_Result> SaleInvoice(Nullable<long> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleInvoice_Result>("SaleInvoice", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual int SavePurchaseEntryData(Nullable<int> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SavePurchaseEntryData", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual int SaveReceiptPaymentData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveReceiptPaymentData");
        }
    
        public virtual int SaveSaleEntryData(Nullable<int> purchaseSaleBookHeaderID)
        {
            var purchaseSaleBookHeaderIDParameter = purchaseSaleBookHeaderID.HasValue ?
                new ObjectParameter("PurchaseSaleBookHeaderID", purchaseSaleBookHeaderID) :
                new ObjectParameter("PurchaseSaleBookHeaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveSaleEntryData", purchaseSaleBookHeaderIDParameter);
        }
    
        public virtual int sp_Audit_Trail(string tableName, byte[] columnUpdate)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnUpdateParameter = columnUpdate != null ?
                new ObjectParameter("columnUpdate", columnUpdate) :
                new ObjectParameter("columnUpdate", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_Trail", tableNameParameter, columnUpdateParameter);
        }
    
        public virtual int Test1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Test1");
        }
    }
}
